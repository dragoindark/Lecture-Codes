package task11;

public class oddThread extends Thread{
	private int[][] matrix;
	private int startIndex, threadDelay,threadPriority;
	private volatile int totalSum = 0;
	private String threadName;
	private volatile boolean threadEnd=false;

	Thread myOddThread;

	public oddThread(int[][] matrix, int startIndex, String threadName, int threadPriority, int threadDelay) {
		super(threadName);
		this.matrix = matrix;
		this.startIndex = startIndex;
		this.threadDelay = threadDelay;
		this.threadName=threadName;
		this.threadPriority=threadPriority;
	}

	public int getSum() {
		return totalSum;
	}
	public void setSum(int newSum) {
		totalSum+=newSum;
	}
	public synchronized void printSum() {
		if(threadEnd) {
		System.out.println(myOddThread.toString()+" Sum:" + totalSum + ".");	
		}
	}

	public Thread getThread() {
		return myOddThread;
	}

	public int getDelay() {
		return threadDelay;
	}

	public int getIndex() {
		return startIndex;
	}

	@Override
	public void run() {
		for (int i = startIndex; i < matrix.length; i++) {
			int rowSum = 0;
			if ((i % 2) == 1) {
				for (int j = 0; j < matrix[i].length; j++) {
					rowSum += matrix[i][j];
				}
				synchronized(setSum()) {
					
				}
				totalSum+=rowSum;
				System.out.println(myOddThread.toString()+" Row:" + i + ", Sum:" + rowSum);
				System.out.println(totalSum);
			}
			try {
				myOddThread.sleep(threadDelay);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
	public void start() {
		if(myOddThread==null) {
			myOddThread=new Thread(this,threadName);
			myOddThread.setPriority(threadPriority);
			myOddThread.start();
		}
	}
}
